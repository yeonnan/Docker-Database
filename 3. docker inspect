이미지 세부 정보 조회 ⁠docker image inspect 이미지명 

⁠docker image inspect nginx
nginx 이미지의 메타데이터 확인


컨테이너 실행 시 메타데이터의 cmd 덮어쓰기 ⁠docker run 이미지명 (실행명령) 


⁠docker run -d --name defaultCmd ningx
nginx 이미지를 defaultCmd 이름의 컨테이너로 실행

⁠docker ps
실행중인 컨테이너 리스트 조회

⁠docker ps -a⁠ 
종료된 컨테이너 포함 모든 컨테이너 조회

----

⁠docker run --name customCmd nginx cat /usr/share/nginx/html/index.html 
기본 이미지의 메타데이터를 사용해 컨테이너 실행

아무런 수정 없이 nginx 이미지를 그대로 컨테이너로 실행하면 해당 nginx 서버는 요청을 받았을때 
/usr/share/nginx/html/ 폴더에 있는 index.html 파일을 응답해 준다.

⁠docker container inspect customCmd
customCmd 컨테이너의 메타데이터 확인

cat으로 변경된걸 볼 수 있으며 ⁠docker ps⁠로 확인해 보면 customCmd는 없는것을 볼 수 있다.

customCmd 컨테이너에서 실행한 cat 명령어는 파일의 내용을 출력하고 종료되는 1회성 프로세스 이기 때문에
cmd에서 지정한 cat 명령이 종료되는 순간 컨테이너도 함께 종료가 된다.

그래서 customCmd는 종료된 상태의 컨테이너 이기 때문에 일반적인 docker ps 명령어로는 조회가 불가능 하다.
⁠docker ps -a⁠ 종료된 컨테이너 포함 모든 컨테이너 조회


⁠docker image inspect nginx
nginx 이미지의 메타데이터 재확인

----

⁠docker run -d 이미지명
-d : 컨테이너를 백그라운드에서 실행
⁠-d 옵션 추가 시 ⁠: 지속적으로 실행되는 데몬 프로그램을 실행할 때 적합
-d 옵션을 주면 커맨드 라인에는 실행된 컨테이너의 아이디만 출력된다.
docker run -d --name defaultCmd ningx 

⁠-d 옵션 제거 시 ⁠: 실행 후 종료되는 프로그램에 적합, 실시간으로 로그를 확인할 경우
-d 옵션을 주지 않으면 컨테이너의 출력이 사용자의 커맨드 창과 연결된다.
⁠docker run --name customCmd nginx cat /usr/share/nginx/html/index.html 


컨테이너의 세부 정보 조회 ⁠docker container inspect 컨테이너명 

⁠docker container inspect defaultCmd
defaultCmd 컨테이너의 메타데이터 확인

동일한 env, cmd 확인이 가능한데,
해당 env, cmd는 nginx 이미지의 메타데이터를 그대로 복사해서 가져온 것으로 nginx의 이미지 값과 똑같다.


컨테이너 실행 시 메타데이터의 env 덮어쓰기 ⁠docker run --env KEY=VALUE 이미지명 

⁠docker pull devwikirepo/envnodecolorapp⁠ 실습용 이미지 다운로드
⁠docker image inspect devwikirepo/envnodecolorapp 실습용 이미지 메타데이터 확인

env = color의 값이 red인걸 확인할 수 있다.

docker run -d -p 8080:3000 --name defaultColorApp devwikirepo/envnodecolorapp⁠ 
기본 이미지의 메타데이터를 사용해 컨테이너 실행
⁠docker run -d -p 8081:3000 --name blueColorApp --env COLOR=blue devwikirepo/envnodecolorapp⁠
새롭게 env 필드를 덮어쓰기한 컨테이너 실행
⁠docker container inspect blueColorApp⁠
blueColorApp 컨테이너의 메타데이터 확인

env = color의 값이 blue인걸 확인할 수 있다.




리눅스 명령어
⁠
파일의 내용 출력 ⁠cat 파일 경로
